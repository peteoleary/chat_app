module ChatApp
  VERSION: String

  class User
    attr_reader login: String
    attr_reader email: String

    # positional arguments
    def initialize: (String, String) -> void
  end

  class Bot
    attr_reader name: String
    attr_reader owner: User

    # keyword arguments
    def initialize: (name: String, owner: User) -> void
  end

  class StringWithLimit < String
  end

  class Message
    attr_reader id: String
    attr_reader string: StringWithLimit
    attr_reader from: User | Bot                     # `|` means union types: `#from` can be `User` or `Bot`
    attr_reader reply_to: Message?                   # `?` means optional type: `#reply_to` can be `nil`

    def initialize: (User | Bot, StringWithLimit) -> void

    def reply: (from: User | Bot, string: StringWithLimit) -> Message
  end

  class Channel
    attr_reader name: String
    attr_reader messages: Array[Message]
    attr_reader users: Array[User]
    attr_reader bots: Array[Bot]

    # keyword or positional
    def initialize: (name: String | String) -> void

    def each_member: () { (User | Bot) -> void } -> void  # `{` and `}` means block.
                   | () -> Enumerator[User | Bot, void]   # Method can be overloaded.
  end
end
